name: AWS Lambda CICD
on:
  push:
    branches: [Main]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build Project
        run: mvn clean package
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Check AWS Dynamo DB Table Exists
        run : aws dynamodb describe-table --table-name WeatherData
        continue-on-error: true
      - name: Create AWS Dynamo DB Table
        run: aws dynamodb create-table --table-name WeatherData --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 --table-class STANDARD
        continue-on-error: true
      - name: Create AWS Lambda Function
        run: |
          aws lambda create-function --function-name WeatherLambda --runtime java17 --handler org.example.StreamLambdaHandler::handleRequest --role arn:aws:iam::517903332927:role/lamda-ex --zip-file fileb://target/java-lambda-1.0-SNAPSHOT-lambda-package.zip --timeout 15 --memory-size 512
        continue-on-error: true  
      - name: Update Lambda Function    
        run: aws lambda update-function-code --function-name WeatherLambda --zip-file fileb://target/java-lambda-1.0-SNAPSHOT-lambda-package.zip
        continue-on-error: true
      - name: Create Api Gateway
        run: |
          aws apigateway create-rest-api --name MyApi --description "My API description"  --endpoint-configuration types=REGIONAL 
          API_GATEWAY_ID=$(aws apigateway get-rest-apis --query "items[?name=='MyApi'].[id]"  --output text)
          echo $API_GATEWAY_ID
          API_GATEWAY_ROOT_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $API_GATEWAY_ID --query "items[?path=='/'].[id]" --output text)
          echo $API_GATEWAY_ROOT_RESOURCE_ID
          aws apigateway create-resource --rest-api-id $API_GATEWAY_ID --parent-id $API_GATEWAY_ROOT_RESOURCE_ID --path-part "{proxy+}"
